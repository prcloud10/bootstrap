#!/bin/bash

# Init kubernetes
kubeadm init --skip-phases=preflight --config=/bootstrap/kubeadm.conf --skip-token-print --v=6


# Set kubeconfig 
mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config
export KUBECONFIG=$HOME/.kube/config


# Wait for cluster readinnes
kubectl wait pods -l component=kube-scheduler --for=condition=Ready --timeout=60s --all-namespaces         
kubectl wait pods -l component=kube-controller-manager --for=condition=Ready --timeout=60s --all-namespaces
kubectl wait pods -l component=kube-apiserver --for=condition=Ready --timeout=60s --all-namespaces                  
kubectl wait pods -l component=etcd --for=condition=Ready --timeout=60s --all-namespaces 

n=0
until [ $n -ge 6 ]; do
   REPLICA_COUNT=$(kubectl get daemonsets/kube-proxy -n kube-system -o template --template='{{ .status.numberReady }}')
   echo ${REPLICA_COUNT}
   if [ "${REPLICA_COUNT}" -gt 0 ] ; then
         echo "[info] found 1 available replicas."
         break
   fi
   echo -n "[info] waiting 10 seconds before trying again..."
   sleep 10
done 



# Taint control node
kubectl taint nodes --all node-role.kubernetes.io/master-
kubectl taint nodes --all node-role.kubernetes.io/control-plane- 


# Apply CNI
kubectl apply -f /bootstrap/cni.yaml
kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=60s


# Apply CSI
kubectl apply -f /bootstrap/csi.yaml
kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=60s


# Install monitoring tools
kubectl create namespace monitoring
helm repo add grafana https://grafana.github.io/helm-charts
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm upgrade --atomic --install loki --namespace=monitoring grafana/loki-stack --set promtail.enabled=true,grafana.enabled=true,controller.service.type=ClusterIP
kubectl get secret --namespace monitoring loki-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

# Install ingress controller 
helm upgrade --atomic --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace --set controller.service.type=NodePort,controller.service.nodePorts.http=30400
kubectl apply -f /bootstrap/ingress.yaml


# Install apps
kubectl create namespace provision
helm repo add pnnl-miscscripts https://pnnl-miscscripts.github.io/charts/
helm repo add pnnl-miscscripts-image-library-charts https://pnnl-miscscripts.github.io/image-library-charts/
helm repo update
helm upgrade --atomic --install pixiecore --namespace=provision pnnl-miscscripts/pixiecore 
